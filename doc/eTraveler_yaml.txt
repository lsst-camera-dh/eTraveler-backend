YAML structure for a traveler (process step and arbitrary descendants).
This document describes the format supported by processTraveler.git
as of 2013-12-02
For db version 0.1.0

                        *  *  *  *  *  *  *  *  *  *

1.  Preferably starts with the two lines

%YAML 1.1
---

2. Has a single top-level (YAML) node which describes a process.  All other
nodes are descendants of this one.  Descendent nodes describe a descendent
process, a prerequisite for some process, or a required input (to be
supplied by operator when process is executed).

3. Each process node is a dict.  All keys are string scalar and in the 
remainder of this document will be represented by key followed by a colon, e.g.

Condition:

for the key "Condition".  All keys have scalar values except for the 
following, all of which have list values:

   Sequence
   Selection
   Prerequisites
   RequiredInputs
   TravelerActions   

4. The keys come from a known collection of allowable keys.
Most of them are optional. 

5. Values for some keys will be inherited from parent.

6. If a node is a clone it has the key Clone: whose value
is equal to the value of the Name: key for some node preceding it in the
YAML serialization. In particular the top node can't be a clone. Clone
nodes may optionally have a Condition:  key.  No other keys are allowed.  
The intent is to allow specification of the same process (and all its 
descendants) in more than one place in the traveler.

7. Allowable scalar-valued keys for non-clones are listed below along 
with some of their properties.  Value is a string unless otherwise noted.

Name:   
must appear unless the key Clone appears

HardwareType:
required for top node; ignored for all descendants (they inherit value from 
top node).

HardwareRelationshipType:
optional.    May be null.  See also TravelerActions: below.

InstructionsURL: 
optional

Description:
optional

UserVersionString:
optional.

Version:
optional.  Value if present must be a positive integer. If
not present, defaults to 1.  (do we need a way to say "next"? Should
that be the default instead of 1?)

Condition: required if this node is a member of a list which is itself
the value of a Selection: key; ignored otherwise.

MaxIteration: optional; defaults to 1.  If > 1, operator
may choose to re-execute the step as long as total number of executions is
<= MaxIteration.

8. There are five keys with non-scalar values.

Sequence:
Value is an ordered list of process nodes.  Intent is that the process steps 
represented in the list will be executed in the order specified as child steps.

Selection:
Value is an ordered list of process nodes.  Intent is that at most one of the 
nodes in the list will be executed if the condition described by its Condition:
key is satisfied.  Conditions are evaluated in order until one is satisfied.
Maybe front-end should implement special handling
for final element of list if its condition value is "Default". 

Prerequisites:
Value is a list of prerequisite nodes.

RequiredInputs:
Value is a list of input nodes.

TravelerActions:
Value is a list of items, taken from a pre-defined set of properties which 
may be associated with a step.  Current list of recognized values is
 HarnessedJob
 MakeHardwareRelationship (only if HardwareRelationshipType is non-null)
 BreakHardwareRelationship  (only if HardwareRelationshipType is non-null)


9. Description of a prerequisite node.
Each prerequisite node is a dict with the following keys:

PrerequisiteType:
Required.  Value would normally come from an enumerated set including at least
PROCESS_STEP, COMPONENT, TEST_EQUIPMENT, CONSUMABLE

Name: 
required for types. 
If type was PROCESS_STEP value must match Process.name for some row in
Process table.  Probably we also need Process.hardwareTypeId to match
hardware type of this traveler.
If type was COMPONENT value must match  HardwareType.name or HarwareType.drawing
for some row in HardwareType table.  [Maybe we someday get rid of
HardwareType.name altogether?]


UserVersionString:
Optional. Ignored for types other than  PROCESS_STEP

Version:
Ignored for types other than PROCESS_STEP.  Ignored if UserVersionString
has been used.  Must be positive integer if present. 
Otherwise if type is PROCESS_STEP value for Version defaults to most
current version of specified Process.

Description:
optional

Quantity:
optional.  If present must be positive integer.  Defaults to 1

10. Input nodes
Each input node is a dict with the following keys:

Label:
Required.  Used to prompt operator for value

Semantics:
Required.  Value must be one of a set of known values (to be verified
against database).  These values will be things like "int", "float",
"filepath",...

Units:
Optional.  

MinValue, MaxValue:
Optional.  User input will be compared to one or both of these if present.  
Must be appropriate for value of Semantics

Description:
Optional.  Could be useful if label is not sufficient to clearly indicate
what's needed.

11. Other constraints.

Documents satisfying 1-7 above will pass the first stage of ingest.  The
next stage makes some checks against the database before attempting to 
write anything.

 - value of HardwareType: must correspond to some value of HardwareType.name

 - values of HardwareRelationshipType: (if present) must correspond to 
   to some value of HardwareRelationshipType.name
 
Constraints having to do with contents of the eTraveler db at the time
the YAML file is ingested are described in step 9.

Additional constraints, defined in the database, come into play when
the ingest program attempts to write to the db.  For example, in the
Process table the triple (name, version, hardwareTypeId) must be unique.
